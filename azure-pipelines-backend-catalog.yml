trigger:
  paths:
    include:
    - src/Services/Catalog/*
  branches:
    include:
    - main
variables:
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: agentpool
  value: 'dockeragent_moises'
- name: prodEnvironmentName
  value: 'production'
- name: webAppName
  value: 'pokecatalogdb'
- name: projectName
  value: 'Catalog.API'
- name: azureSubscription
  value: 'Azure for Students(0c9ccb5a-239a-4bc1-ba6d-cfaf10231094)'
- name: AppPublishDir
  value: '/app/publish'
- name: netVer
  value: 'net6.0'
- name: arch
  value: 'linux-x64'
stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: $(agentpool)
    steps:
    - task: CmdLine@2
      displayName: 'Update system, its dependencies and install zip utility.'
      inputs:
        script: |
          apt-get update \
              && apt-get install -y zip apt-transport-https \
              && apt-get autoremove \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        version: '6.x'
    - task: DotNetCoreCLI@2
      displayName: 'Restore project'
      inputs:
        command: 'custom'
        projects: '$(System.DefaultWorkingDirectory)/src/Services/Catalog/$(projectName)/$(projectName).csproj'
        custom: 'restore'
    - task: DotNetCoreCLI@2
      displayName: 'Build project'
      inputs:
        command: 'build'
        projects: '$(System.DefaultWorkingDirectory)/src/Services/Catalog/$(projectName)/$(projectName).csproj'
        arguments: '-c $(buildConfiguration) -o /app/build'
        workingDirectory: '$(System.DefaultWorkingDirectory)/src/Services/Catalog/$(projectName)'
    - task: DotNetCoreCLI@2
      displayName: 'Publish project'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '-c $(buildConfiguration) -o $(AppPublishDir)'
        zipAfterPublish: false
        workingDirectory: '$(System.DefaultWorkingDirectory)/src/Services/Catalog/$(projectName)'
    - task: ArchiveFiles@2
      displayName: 'Archive files and move publish pipeline artifacts folder'
      inputs:
        rootFolderOrFile: '$(AppPublishDir)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
    - task: CopyFiles@2
      displayName: 'Copy Files to Publish Artifacts Directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).zip'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish pipeline artifacts'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        artifact: '$(Build.BuildId)'
        publishLocation: 'pipeline'
- stage: Deploy
  displayName: Deploy stage
  dependsOn:
  - Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment:
      name: $(prodEnvironmentName)
    pool:
      name: $(agentpool)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download pipeline artifacts'
            inputs:
              buildType: 'current'
              artifactName: '$(Build.BuildId)'
              targetPath: '$(Pipeline.Workspace)'
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy to Azure App Service'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              WebAppName: '$(webAppName)'
              packageForLinux: '$(Pipeline.Workspace)/$(Build.BuildId).zip'
              RuntimeStack: 'DOTNETCORE|6.0'
              StartupCommand: 'dotnet $(projectName)/$(projectName).dll'

